var ElDataTable=function(e,n){"use strict";n=n&&n.hasOwnProperty("default")?n.default:n;var t=function(e,n,t,i,a,o,r,l,s,c){"boolean"!=typeof r&&(s=l,l=r,r=!1);var u,d="function"==typeof t?t.options:t;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,a&&(d.functional=!0)),i&&(d._scopeId=i),o?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,s(e)),e&&e._registeredComponents&&e._registeredComponents.add(o)},d._ssrRegister=u):n&&(u=r?function(){n.call(this,c(this.$root.$options.shadowRoot))}:function(e){n.call(this,l(e))}),u)if(d.functional){var h=d.render;d.render=function(e,n){return u.call(n),h(e,n)}}else{var f=d.beforeCreate;d.beforeCreate=f?[].concat(f,u):[u]}return t};const i={data:function(){return{style:{border:"none",background:"inherit",padding:"9px 0"}}},mounted:function(){this.style=Object.assign({},this.style,{color:getComputedStyle(this.$el).color})}};var a=function(){var e=this.$createElement;return(this._self._c||e)("el-button",this._g(this._b({style:this.style,attrs:{type:this.$attrs.type||"primary",plain:""}},"el-button",this.$attrs,!1),this.$listeners),[this._t("default")],2)};a._withStripped=!0;var o=t({render:a,staticRenderFns:[]},void 0,i,void 0,!1,void 0,void 0,void 0);const r={components:{TextButton:o},props:{isText:{type:Boolean,default:!1},type:String,click:{type:Function},params:{},callback:{type:Function,default:function(){}}},data:function(){return{loading:!1}},methods:{handleClick:function(){var e=this;this.click&&(this.loading=!0,Promise.resolve(this.click(this.params)).then(function(n){!1!==n&&e.callback()}).catch(function(e){}).finally(function(n){e.loading=!1}))}}};var l=function(){var e=this,n=e.$createElement;return(e._self._c||n)(e.isText?"text-button":"el-button",e._g(e._b({tag:"component",attrs:{loading:e.loading,type:e.type},on:{click:e.handleClick}},"component",e.$attrs,!1),e.$listeners),[e._t("default")],2)};l._withStripped=!0;var s=t({render:l,staticRenderFns:[]},void 0,r,void 0,!1,void 0,void 0,void 0);var c=function(e){if(Array.isArray(e))return e};var u=function(e,n){var t=[],i=!0,a=!1,o=void 0;try{for(var r,l=e[Symbol.iterator]();!(i=(r=l.next()).done)&&(t.push(r.value),!n||t.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==l.return||l.return()}finally{if(a)throw o}}return t};var d=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")};var h=function(e,n){return c(e)||u(e,n)||d()},f="~",p=",",m="q=",g=new RegExp(m+".*"+p);function y(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:f,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:p;return Object.keys(e).map(function(t){return"".concat(t).concat(n).concat(encodeURIComponent(e[t]))}).join(t)}function b(e){var n=e.match(g);return n?function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:f,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:p;return e.split(t).map(function(e){return e.split(n)}).reduce(function(e,n){var t=h(n,2),i=t[0],a=t[1];return e[i]=decodeURIComponent(a),e},{})}(n[0].replace(m,"").slice(0,-1)):null}function v(e,n){return e(n={exports:{}},n.exports),n.exports}var w=v(function(e){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function t(i){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=t=function(e){return n(e)}:e.exports=t=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},t(i)}e.exports=t});var x=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e};var S=function(e,n){return!n||"object"!==w(n)&&"function"!=typeof n?x(e):n},A=v(function(e){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n}),_=v(function(e){function n(t,i){return e.exports=n=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e},n(t,i)}e.exports=n});var C=function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&_(e,n)};var k=function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")};function T(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var E=function(e,n,t){return n&&T(e.prototype,n),t&&T(e,t),e},$=function(){function e(n){k(this,e),this.elDataTable=n,this.onSelectionChange=this.onSelectionChange.bind(this),this.onSelect=this.onSelect.bind(this),this.onSelectAll=this.onSelectAll.bind(this)}return E(e,[{key:"onSelectionChange",value:function(){}},{key:"onSelect",value:function(){}},{key:"onSelectAll",value:function(){}},{key:"toggleRowSelection",value:function(){}},{key:"clearSelection",value:function(){}},{key:"updateElTableSelection",value:function(){}},{key:"elTable",get:function(){return this.elDataTable.$refs.table}}]),e}(),F=function(e){function n(){return k(this,n),S(this,A(n).apply(this,arguments))}return C(n,$),E(n,[{key:"onSelectionChange",value:function(e){this.elDataTable.selected=e}},{key:"toggleRowSelection",value:function(){var e;return(e=this.elTable).toggleRowSelection.apply(e,arguments)}},{key:"clearSelection",value:function(){return this.elTable.clearSelection()}}]),n}(),P=function(e){function n(){return k(this,n),S(this,A(n).apply(this,arguments))}return C(n,$),E(n,[{key:"onSelect",value:function(e,n){var t=e.indexOf(n)>-1;this.toggleRowSelection(n,t)}},{key:"onSelectAll",value:function(e){var n=this,t=!!e.length;this.elDataTable.data.forEach(function(e){return n.toggleRowSelection(e,t)})}},{key:"toggleRowSelection",value:function(e,n){var t=this.elDataTable,i=t.id,a=t.selected,o=a.findIndex(function(n){return n[i]===e[i]});void 0===n?o>-1?a.splice(o,1):a.push(e):n&&-1===o?a.push(e):!n&&o>-1&&a.splice(o,1),this.updateElTableSelection()}},{key:"clearSelection",value:function(){this.elDataTable.selected=[],this.updateElTableSelection()}},{key:"updateElTableSelection",value:function(){var e=this,n=this.elDataTable,t=n.data,i=n.id,a=n.selected;t.forEach(function(n){var t=!!a.find(function(e){return n[i]===e[i]});e.elTable.toggleRowSelection(n,t)})}}]),n}();var D={name:"ElDataTable",components:{SelfLoadingButton:s,TextButton:o},props:{url:{type:String,default:""},id:{type:String,default:"id"},firstPage:{type:Number,default:1},dataPath:{type:String,default:"payload.content"},totalPath:{type:String,default:"payload.totalElements"},columns:{type:Array,default:function(){return[]}},searchForm:{type:Array,default:function(){return[]}},canSearchCollapse:{type:Boolean,default:!1},beforeSearch:{type:Function,default:function(){return Promise.resolve()}},single:{type:Boolean,default:!1},persistSelection:{type:Boolean,default:!1},hasOperation:{type:Boolean,default:!0},extraButtons:{type:Array,default:function(){return[]}},headerButtons:{type:Array,default:function(){return[]}},hasNew:{type:Boolean,default:!0},hasEdit:{type:Boolean,default:!0},hasView:{type:Boolean,default:!1},hasDelete:{type:Boolean,default:!0},newText:{type:String,default:"新增"},editText:{type:String,default:"修改"},viewText:{type:String,default:"查看"},canDelete:{type:Function,default:function(){return!0}},onNew:{type:Function},onEdit:{type:Function},onDelete:{type:Function},hasPagination:{type:Boolean,default:!0},paginationLayout:{type:String,default:"total, sizes, prev, pager, next, jumper"},paginationSizes:{type:Array,default:function(){return[10,20,30,40,50]}},paginationSize:{type:Number,default:10},noPaginationSize:{type:Number,default:999},isTree:{type:Boolean,default:!1},treeChildKey:{type:String,default:"children"},treeParentKey:{type:String,default:"parentId"},treeParentValue:{type:String,default:"id"},expandAll:{type:Boolean,default:!1},tableAttrs:{type:Object,default:function(){return{}}},operationAttrs:{type:Object,default:function(){return{width:"",fixed:"right"}}},hasDialog:{type:Boolean,default:!0},dialogNewTitle:{type:String,default:function(){return this.newText}},dialogEditTitle:{type:String,default:function(){return this.editText}},dialogViewTitle:{type:String,default:function(){return this.viewText}},form:{type:Array,default:function(){return[]}},formAttrs:{type:Object,default:function(){return{}}},extraParams:{type:Object,default:function(){}},extraBody:{type:Object,default:function(){}},beforeConfirm:{type:Function,default:function(){return Promise.resolve()}},customQuery:{type:Object,default:function(){}},extraQuery:{type:Object,default:function(){}},saveQuery:{type:Boolean,default:!0}},data:function(){return{data:[],hasSelect:this.columns.length&&"selection"==this.columns[0].type,size:this.paginationSize||this.paginationSizes[0],page:1,total:null,loading:!1,selected:[],dialogTitle:this.dialogNewTitle,dialogVisible:!1,isNew:!0,isEdit:!1,isView:!1,confirmLoading:!1,row:{},initExtraQuery:JSON.stringify(this.extraQuery||this.customQuery||{}),isSearchCollapse:!1}},computed:{routerMode:function(){return this.$router?this.$router.mode:"hash"},hasSearchForm:function(){return this.searchForm.length||this.$slots.search},_extraBody:function(){return this.extraBody||this.extraParams||{}},_extraQuery:function(){return this.extraQuery||this.customQuery||{}},selectStrategy:function(){return(e=this).persistSelection?new P(e):new F(e);var e}},watch:{url:function(e,n){this.page=1,this.getList()},dialogVisible:function(e,n){e||(this.isNew=!1,this.isEdit=!1,this.isView=!1,this.confirmLoading=!1,this.$refs.dialogForm.resetFields())},selected:function(e){this.$emit("selection-change",e)}},mounted:function(){var e=this;if(this.saveQuery){var n=b(location.href);n&&(this.page=parseInt(n.page),this.size=parseInt(n.size),this.$refs.searchForm&&(delete n.page,delete n.size,this.$refs.searchForm.updateForm(n)))}this.$nextTick(function(){e.getList()})},methods:{getList:function(e){var t=this,i=this.url;if(i){var a={};this.$refs.searchForm&&Object.assign(a,this.$refs.searchForm.getFormValue()),Object.assign(a,this._extraQuery),a.size=this.hasPagination?this.size:this.noPaginationSize;var o=this.firstPage-1;a.page=this.hasPagination?this.page+o:-1,a=Object.keys(a).filter(function(e){return-1===["",void 0,null].indexOf(a[e])}).reduce(function(e,n){return e[n]=a[n].toString().trim(),e},{});var r=(i.indexOf("?")>-1?"&":"?")+y(a,"=","&");if(this.loading=!0,this.$axios.get(i+r).then(function(e){var i=e.data,a=[];t.hasPagination?(a=n(i,t.dataPath)||[],t.total=n(i,t.totalPath)):a=n(i,t.dataPath)||n(i,"payload")||[],t.data=a,t.isTree&&(t.data=t.tree2Array(a,t.expandAll)),t.loading=!1,t.$emit("update",a,i),t.$nextTick(function(){t.selectStrategy.updateElTableSelection()})}).catch(function(e){t.$emit("error",e),t.loading=!1}),e){a.page=this.page;var l=function(e,n,t){var i=m+y(n)+p,a=function(e){return e.indexOf("?")>-1?"&":"?"};if(g.test(e))return e.replace(g,i);if(-1===e.indexOf("#"))return e+a(e)+i;var o=e.split("#"),r=h(o,2),l=r[0],s=r[1];return"history"===t?l+a(l)+i+"#"+s:e+a(s)+i}(location.href,a,this.routerMode);history.pushState(history.state,"el-data-table search",l)}}else console.warn("DataTable: url 为空, 不发送请求")},search:function(){var e=this;this.$refs.searchForm.validate(function(n){n&&e.beforeSearch().then(function(){e.page=1,e.getList(e.saveQuery)}).catch(function(n){e.$emit("error",n)})})},resetSearch:function(){var e=this;if(this.$refs.searchForm.resetFields(),this.page=1,this.saveQuery){var n=function(e){if(g.test(e)){var n=RegExp("[?&]"+g.source);return e.replace(n,"")}return e}(location.href);history.replaceState(history.state,"",n)}this.$nextTick(function(){e.getList()}),this.$emit("reset"),this.$emit("update:customQuery",JSON.parse(this.initExtraQuery)),this.$emit("update:extraQuery",JSON.parse(this.initExtraQuery))},handleSizeChange:function(e){this.size!==e&&(this.page=1,this.size=e,this.getList(this.saveQuery))},handleCurrentChange:function(e){this.page!==e&&(this.page=e,this.getList(this.saveQuery))},toggleRowSelection:function(e,n){return this.selectStrategy.toggleRowSelection(e,n)},clearSelection:function(){return this.selectStrategy.clearSelection()},onDefaultNew:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.row=e,this.isNew=!0,this.isEdit=!1,this.isView=!1,this.dialogTitle=this.dialogNewTitle,this.dialogVisible=!0},onDefaultView:function(e){var n=this;this.row=e,this.isView=!0,this.isNew=!1,this.isEdit=!1,this.dialogTitle=this.dialogViewTitle,this.dialogVisible=!0,this.$nextTick(function(){n.$refs.dialogForm.updateForm(e)})},onDefaultEdit:function(e){var n=this;this.row=e,this.isEdit=!0,this.isNew=!1,this.isView=!1,this.dialogTitle=this.dialogEditTitle,this.dialogVisible=!0,this.$nextTick(function(){n.$refs.dialogForm.updateForm(e)})},cancel:function(){this.dialogVisible=!1},confirm:function(){var e=this;this.isView?this.cancel():this.$refs.dialogForm.validate(function(n){if(!n)return!1;var t=Object.assign({},e.$refs.dialogForm.getFormValue(),e._extraBody);e.isTree&&(e.isNew?t[e.treeParentKey]=e.row[e.treeParentValue]:t[e.treeParentKey]=e.row[e.treeParentKey]),e.beforeConfirm(t,e.isNew).then(function(n){var i="isNew",a="onNew";if(e.isEdit&&(i="isEdit",a="onEdit"),e[i]&&e[a])e[a](t,e.row).then(function(n){e.getList(),e.showMessage(!0),e.cancel()}).catch(function(e){});else{var o="post",r=e.url+"";e.isEdit&&(o="put",r+="/".concat(e.row[e.id])),e.confirmLoading=!0,e.$axios[o](r,t).then(function(n){e.getList(),e.showMessage(!0),e.cancel()}).catch(function(n){e.confirmLoading=!1})}}).catch(function(e){})})},onDefaultDelete:function(e){var n=this;this.$confirm("确认删除吗","提示",{type:"warning",confirmButtonClass:"el-button--danger",beforeClose:function(t,i,a){if("confirm"==t){if(i.confirmButtonLoading=!0,n.onDelete)return void n.onDelete(n.hasSelect?n.single?n.selected[0]:n.selected:e).then(function(e){n.showMessage(!0),a(),n.clearSelection(),n.getList()}).catch(function(e){}).finally(function(e){i.confirmButtonLoading=!1});n.hasSelect?n.$axios.delete(n.url+"/"+n.selected.map(function(e){return e[n.id]}).toString()).then(function(e){i.confirmButtonLoading=!1,a(),n.showMessage(!0),n.clearSelection(),n.getList()}).catch(function(e){i.confirmButtonLoading=!1}):n.$axios.delete(n.url+"/"+e[n.id]).then(function(e){i.confirmButtonLoading=!1,a(),n.showMessage(!0),n.getList()}).catch(function(e){i.confirmButtonLoading=!1})}else a()}}).catch(function(e){})},tree2Array:function(e,n){var t=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=[];return e.forEach(function(e){void 0===e._expanded&&t.$set(e,"_expanded",n);var r=0;if(null!=a&&(r=a+1),t.$set(e,"_level",r),i&&t.$set(e,"parent",i),o.push(e),e[t.treeChildKey]&&e[t.treeChildKey].length>0){var l=t.tree2Array(e[t.treeChildKey],n,e,r);o=o.concat(l)}}),o},showRow:function(e){var n=!e.row.parent||e.row.parent._expanded&&e.row.parent._show;return e.row._show=n,n?"animation:treeTableShow 1s-webkit-animation:treeTableShow 1s":"display:none"},toggleExpanded:function(e){var n=this.data[e];n._expanded=!n._expanded},iconShow:function(e,n){return n[this.treeChildKey]&&n[this.treeChildKey].length>0},showMessage:function(){!(arguments.length>0&&void 0!==arguments[0])||arguments[0]?this.$message({type:"success",message:"操作成功"}):this.$message({type:"error",message:"操作失败"})}}},B="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());var z=document.head||document.getElementsByTagName("head")[0],N={};var O=function(e){return function(e,n){return function(e,n){var t=B?n.media||"default":e,i=N[t]||(N[t]={ids:new Set,styles:[]});if(!i.ids.has(e)){i.ids.add(e);var a=n.source;if(n.map&&(a+="\n/*# sourceURL="+n.map.sources[0]+" */",a+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n.map))))+" */"),i.element||(i.element=document.createElement("style"),i.element.type="text/css",n.media&&i.element.setAttribute("media",n.media),z.appendChild(i.element)),"styleSheet"in i.element)i.styles.push(a),i.element.styleSheet.cssText=i.styles.filter(Boolean).join("\n");else{var o=i.ids.size-1,r=document.createTextNode(a),l=i.element.childNodes;l[o]&&i.element.removeChild(l[o]),l.length?i.element.insertBefore(r,l[o]):i.element.appendChild(r)}}}(e,n)}};const L=D;var V=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"el-data-table"},[e.hasSearchForm?t("el-form-renderer",{directives:[{name:"show",rawName:"v-show",value:!e.isSearchCollapse,expression:"!isSearchCollapse"}],ref:"searchForm",attrs:{inline:"",content:e.searchForm},nativeOn:{submit:function(e){e.preventDefault()}}},[e._t("search"),e._v(" "),t("el-form-item",[t("el-button",{attrs:{"native-type":"submit",type:"primary",size:"small"},on:{click:e.search}},[e._v("查询")]),e._v(" "),t("el-button",{attrs:{size:"small"},on:{click:e.resetSearch}},[e._v("重置")])],1)],2):e._e(),e._v(" "),e.hasNew||e.hasDelete||e.headerButtons.length>0||e.canSearchCollapse?t("el-form",[t("el-form-item",[e.hasNew?t("el-button",{attrs:{type:"primary",size:"small"},on:{click:e.onDefaultNew}},[e._v(e._s(e.newText))]):e._e(),e._v(" "),e._l(e.headerButtons,function(n,i){return"show"in n&&!n.show(e.selected)?e._e():t("self-loading-button",e._b({key:i,attrs:{disabled:"disabled"in n&&n.disabled(e.selected),click:n.atClick,params:e.selected,callback:e.getList,size:"small"}},"self-loading-button",n,!1),[e._v("\n        "+e._s("function"==typeof n.text?n.text(e.selected):n.text)+"\n      ")])}),e._v(" "),e.hasSelect&&e.hasDelete?t("el-button",{attrs:{type:"danger",size:"small",disabled:e.single?!e.selected.length||e.selected.length>1:!e.selected.length},on:{click:function(n){return e.onDefaultDelete(n)}}},[e._v("删除")]):e._e(),e._v(" "),e.canSearchCollapse?t("el-button",{attrs:{type:"default",size:"small",icon:"el-icon-arrow-"+(e.isSearchCollapse?"down":"up")},on:{click:function(n){e.isSearchCollapse=!e.isSearchCollapse}}},[e._v(e._s(e.isSearchCollapse?"展开":"折叠")+"搜索")]):e._e()],2)],1):e._e(),e._v(" "),t("el-table",e._b({directives:[{name:"loading",rawName:"v-loading",value:e.loading,expression:"loading"}],ref:"table",attrs:{data:e.data,"row-style":e.showRow},on:{"selection-change":e.selectStrategy.onSelectionChange,select:e.selectStrategy.onSelect,"select-all":e.selectStrategy.onSelectAll}},"el-table",e.tableAttrs,!1),[e.isTree?[e.hasSelect?[t("el-table-column",e._b({key:"selection-key"},"el-table-column",e.columns[0],!1)),e._v(" "),t("el-table-column",e._b({key:"tree-ctrl",scopedSlots:e._u([{key:"default",fn:function(n){return[e._l(n.row._level,function(n){return e.isTree?t("span",{key:n,staticClass:"ms-tree-space"}):e._e()}),e._v(" "),e.isTree&&e.iconShow(n.$index,n.row)?t("span",{staticClass:"tree-ctrl",on:{click:function(t){return e.toggleExpanded(n.$index)}}},[n.row._expanded?t("i",{staticClass:"el-icon-minus"}):t("i",{staticClass:"el-icon-plus"})]):e._e(),e._v("\n            "+e._s(n.row[e.columns[1].prop])+"\n          ")]}}],null,!1,1667431242)},"el-table-column",e.columns[1],!1)),e._v(" "),e._l(e.columns.filter(function(e,n){return 0!==n&&1!==n}),function(n){return t("el-table-column",e._b({key:n.prop},"el-table-column",n,!1))})]:[t("el-table-column",e._b({key:"tree-ctrl",scopedSlots:e._u([{key:"default",fn:function(n){return[e._l(n.row._level,function(n){return e.isTree?t("span",{key:n,staticClass:"ms-tree-space"}):e._e()}),e._v(" "),e.isTree&&e.iconShow(n.$index,n.row)?t("span",{staticClass:"tree-ctrl",on:{click:function(t){return e.toggleExpanded(n.$index)}}},[n.row._expanded?t("i",{staticClass:"el-icon-minus"}):t("i",{staticClass:"el-icon-plus"})]):e._e(),e._v("\n            "+e._s(n.row[e.columns[0].prop])+"\n          ")]}}],null,!1,1528062795)},"el-table-column",e.columns[0],!1)),e._v(" "),e._l(e.columns.filter(function(e,n){return 0!==n}),function(n){return t("el-table-column",e._b({key:n.prop},"el-table-column",n,!1))})]]:e._l(e.columns,function(n){return t("el-table-column",e._b({key:n.prop},"el-table-column",n,!1))}),e._v(" "),e.hasOperation?t("el-table-column",e._b({attrs:{label:"操作"},scopedSlots:e._u([{key:"default",fn:function(n){return[e.isTree&&e.hasNew?t("text-button",{on:{click:function(t){return e.onDefaultNew(n.row)}}},[e._v(e._s(e.newText))]):e._e(),e._v(" "),e.hasEdit?t("text-button",{on:{click:function(t){return e.onDefaultEdit(n.row)}}},[e._v(e._s(e.editText))]):e._e(),e._v(" "),e.hasView?t("text-button",{on:{click:function(t){return e.onDefaultView(n.row)}}},[e._v(e._s(e.viewText))]):e._e(),e._v(" "),e._l(e.extraButtons,function(i,a){return"show"in i&&!i.show(n.row)?e._e():t("self-loading-button",e._b({key:a,attrs:{click:i.atClick,params:n.row,callback:e.getList,"is-text":""}},"self-loading-button",i,!1),[e._v("\n          "+e._s("function"==typeof i.text?i.text(n.row):i.text)+"\n        ")])}),e._v(" "),!e.hasSelect&&e.hasDelete&&e.canDelete(n.row)?t("text-button",{attrs:{type:"danger"},on:{click:function(t){return e.onDefaultDelete(n.row)}}},[e._v("删除")]):e._e()]}}],null,!1,4130849817)},"el-table-column",e.operationAttrs,!1)):e._e(),e._v(" "),e._t("default")],2),e._v(" "),e.hasPagination?t("el-pagination",{staticStyle:{"text-align":"right",padding:"10px 0"},attrs:{"current-page":e.page,"page-sizes":e.paginationSizes,"page-size":e.size,total:e.total,layout:e.paginationLayout},on:{"size-change":e.handleSizeChange,"current-change":e.handleCurrentChange}}):e._e(),e._v(" "),e.hasDialog?t("el-dialog",{attrs:{title:e.dialogTitle,visible:e.dialogVisible},on:{"update:visible":function(n){e.dialogVisible=n}}},[t("el-form-renderer",e._b({ref:"dialogForm",attrs:{content:e.form,disabled:e.isView}},"el-form-renderer",e.formAttrs,!1),[e._t("form")],2),e._v(" "),t("div",{directives:[{name:"show",rawName:"v-show",value:!e.isView,expression:"!isView"}],attrs:{slot:"footer"},slot:"footer"},[t("el-button",{attrs:{size:"small"},on:{click:e.cancel}},[e._v("取 消")]),e._v(" "),t("el-button",{attrs:{type:"primary",loading:e.confirmLoading,size:"small"},on:{click:e.confirm}},[e._v("确 定")])],1)],1):e._e()],1)};V._withStripped=!0;var j=t({render:V,staticRenderFns:[]},function(e){e&&e("data-v-79a2a716_0",{source:".el-data-table .ms-tree-space {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  width: 18px;\n  height: 14px;\n}\n.el-data-table .ms-tree-space::before {\n  content: '';\n}\n.el-data-table .tree-ctrl {\n  position: relative;\n  cursor: pointer;\n  color: #2196f3;\n}\n@-moz-keyframes treeTableShow {\nfrom {\n    opacity: 0;\n}\nto {\n    opacity: 1;\n}\n}\n@-webkit-keyframes treeTableShow {\nfrom {\n    opacity: 0;\n}\nto {\n    opacity: 1;\n}\n}\n@-o-keyframes treeTableShow {\nfrom {\n    opacity: 0;\n}\nto {\n    opacity: 1;\n}\n}\n@keyframes treeTableShow {\nfrom {\n    opacity: 0;\n}\nto {\n    opacity: 1;\n}\n}\n",map:{version:3,sources:["/home/travis/build/FEMessage/el-data-table/src/el-data-table.vue","el-data-table.vue"],names:[],mappings:"AA0mCA;EACA,kBAAA;EACA,QAAA;EACA,qBAAA;EACA,kBAAA;EACA,gBAAA;EACA,cAAA;EACA,WAAA;EACA,YAAA;ACzmCA;AD2mCA;EACA,WAAA;ACzmCA;AD6mCA;EACA,kBAAA;EACA,eAAA;EACA,cAAA;AC3mCA;AD8mCA;AACA;IACA,UAAA;AC5mCE;AD+mCF;IACA,UAAA;AC7mCE;AACF;ADsmCA;AACA;IACA,UAAA;ACpmCE;ADumCF;IACA,UAAA;ACrmCE;AACF;AD8lCA;AACA;IACA,UAAA;AC5lCE;AD+lCF;IACA,UAAA;AC7lCE;AACF;ADslCA;AACA;IACA,UAAA;ACplCE;ADulCF;IACA,UAAA;ACrlCE;AACF",file:"el-data-table.vue",sourcesContent:['<template>\n  <div class="el-data-table">\n    \x3c!-- @submit.native.prevent --\x3e\n    \x3c!-- 阻止表单提交的默认行为 --\x3e\n    \x3c!-- https://www.w3.org/MarkUp/html-spec/html-spec_8.html#SEC8.2 --\x3e\n    \x3c!--搜索字段--\x3e\n    <el-form-renderer\n      v-if="hasSearchForm"\n      v-show="!isSearchCollapse"\n      inline\n      :content="searchForm"\n      ref="searchForm"\n      @submit.native.prevent\n    >\n      \x3c!--@slot 额外的搜索内容, 当searchForm不满足需求时可以使用--\x3e\n      <slot name="search"></slot>\n      <el-form-item>\n        \x3c!--https://github.com/ElemeFE/element/pull/5920--\x3e\n        <el-button native-type="submit" type="primary" @click="search" size="small">查询</el-button>\n        <el-button @click="resetSearch" size="small">重置</el-button>\n      </el-form-item>\n    </el-form-renderer>\n\n    <el-form v-if="hasNew || hasDelete || headerButtons.length > 0 || canSearchCollapse">\n      <el-form-item>\n        <el-button v-if="hasNew" type="primary" size="small" @click="onDefaultNew">{{ newText }}</el-button>\n        <self-loading-button\n          v-for="(btn, i) in headerButtons"\n          v-if="\'show\' in btn ? btn.show(selected) : true"\n          :disabled="\'disabled\' in btn ? btn.disabled(selected) : false"\n          :click="btn.atClick"\n          :params="selected"\n          :callback="getList"\n          v-bind="btn"\n          :key="i"\n          size="small"\n        >\n          {{typeof btn.text === \'function\' ? btn.text(selected) : btn.text}}\n        </self-loading-button>\n        <el-button\n          v-if="hasSelect && hasDelete"\n          type="danger"\n          size="small"\n          @click="onDefaultDelete($event)"\n          :disabled="single ? (!selected.length || selected.length > 1) : !selected.length"\n        >删除</el-button>\n        <el-button\n          v-if="canSearchCollapse"\n          type="default"\n          size="small"\n          :icon="`el-icon-arrow-${isSearchCollapse ? \'down\' : \'up\'}`"\n          @click="isSearchCollapse = !isSearchCollapse"\n        >{{ isSearchCollapse ? \'展开\' : \'折叠\' }}搜索</el-button>\n      </el-form-item>\n    </el-form>\n\n    <el-table\n      ref="table"\n      v-bind="tableAttrs"\n      :data="data"\n      :row-style="showRow"\n      v-loading="loading"\n      @selection-change="selectStrategy.onSelectionChange"\n      @select="selectStrategy.onSelect"\n      @select-all="selectStrategy.onSelectAll"\n    >\n      \x3c!--TODO 不用jsx写, 感觉template逻辑有点不清晰了--\x3e\n      <template v-if="isTree">\n        \x3c!--有多选--\x3e\n        <template v-if="hasSelect">\n          <el-table-column key="selection-key" v-bind="columns[0]"></el-table-column>\n\n          <el-table-column key="tree-ctrl" v-bind="columns[1]">\n            <template slot-scope="scope">\n              <span\n                v-if="isTree"\n                v-for="space in scope.row._level"\n                class="ms-tree-space"\n                :key="space"\n              ></span>\n              <span\n                v-if="isTree && iconShow(scope.$index, scope.row)"\n                class="tree-ctrl"\n                @click="toggleExpanded(scope.$index)"\n              >\n                <i v-if="!scope.row._expanded" class="el-icon-plus"></i>\n                <i v-else class="el-icon-minus"></i>\n              </span>\n              {{scope.row[columns[1].prop]}}\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            v-for="(col) in columns.filter((c, i) => i !== 0 && i !== 1)"\n            :key="col.prop"\n            v-bind="col"\n          ></el-table-column>\n        </template>\n\n        \x3c!--无选择--\x3e\n        <template v-else>\n          \x3c!--展开这列, 丢失 el-table-column属性--\x3e\n          <el-table-column key="tree-ctrl" v-bind="columns[0]">\n            <template slot-scope="scope">\n              <span\n                v-if="isTree"\n                v-for="space in scope.row._level"\n                class="ms-tree-space"\n                :key="space"\n              ></span>\n              <span\n                v-if="isTree && iconShow(scope.$index, scope.row)"\n                class="tree-ctrl"\n                @click="toggleExpanded(scope.$index)"\n              >\n                <i v-if="!scope.row._expanded" class="el-icon-plus"></i>\n                <i v-else class="el-icon-minus"></i>\n              </span>\n              {{scope.row[columns[0].prop]}}\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            v-for="(col) in columns.filter((c, i) => i !== 0)"\n            :key="col.prop"\n            v-bind="col"\n          ></el-table-column>\n        </template>\n      </template>\n\n      \x3c!--非树--\x3e\n      <template v-else>\n        <el-table-column v-for="(col) in columns" :key="col.prop" v-bind="col"></el-table-column>\n      </template>\n\n      \x3c!--默认操作列--\x3e\n      <el-table-column label="操作" v-if="hasOperation" v-bind="operationAttrs">\n        <template slot-scope="scope">\n          <text-button\n            v-if="isTree && hasNew"\n            @click="onDefaultNew(scope.row)"\n          >{{ newText }}</text-button>\n          <text-button\n            v-if="hasEdit"\n            @click="onDefaultEdit(scope.row)"\n          >{{ editText }}</text-button>\n          <text-button\n            v-if="hasView"\n            @click="onDefaultView(scope.row)"\n          >{{ viewText }}</text-button>\n          <self-loading-button\n            v-for="(btn, i) in extraButtons"\n            v-if="\'show\' in btn ? btn.show(scope.row) : true"\n            v-bind="btn"\n            :click="btn.atClick"\n            :params="scope.row"\n            :callback="getList"\n            :key="i"\n            is-text\n          >\n            {{typeof btn.text === \'function\' ? btn.text(scope.row) : btn.text}}\n          </self-loading-button>\n          <text-button\n            v-if="!hasSelect && hasDelete && canDelete(scope.row)"\n            type="danger"\n            @click="onDefaultDelete(scope.row)"\n          >删除</text-button>\n        </template>\n      </el-table-column>\n\n      \x3c!--@slot 自定义操作列, 当extraButtons不满足需求时可以使用 --\x3e\n      <slot></slot>\n    </el-table>\n    <el-pagination\n      v-if="hasPagination"\n      @size-change="handleSizeChange"\n      @current-change="handleCurrentChange"\n      :current-page="page"\n      :page-sizes="paginationSizes"\n      :page-size="size"\n      :total="total"\n      style="text-align: right; padding: 10px 0"\n      :layout="paginationLayout"\n    ></el-pagination>\n    <el-dialog :title="dialogTitle" :visible.sync="dialogVisible" v-if="hasDialog">\n      \x3c!--https://github.com/FEMessage/el-form-renderer--\x3e\n      <el-form-renderer :content="form" ref="dialogForm" v-bind="formAttrs" :disabled="isView">\n        \x3c!--@slot 额外的弹窗表单内容, 当form不满足需求时可以使用，参考：https://femessage.github.io/el-form-renderer/#/Demo?id=slot --\x3e\n        <slot name="form"></slot>\n      </el-form-renderer>\n\n      <div slot="footer" v-show="!isView">\n        <el-button @click="cancel" size="small">取 消</el-button>\n        <el-button type="primary" @click="confirm" :loading="confirmLoading" size="small">确 定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport _get from \'lodash.get\'\nimport SelfLoadingButton from \'./self-loading-button.vue\'\nimport TextButton from \'./text-button.vue\'\nimport * as queryUtil from \'./utils/query\'\nimport getSelectStrategy from \'./utils/select-strategy\'\n\n// 默认返回的数据格式如下\n//          {\n//            "code":0,\n//            "msg":"ok",\n//            "payload":{\n//              "content":[], // 数组\n//              "totalElements":2, // 总数\n//            }\n//          }\n// 可根据实际情况传入 data/total 两个字段的路径, 分别对应上面数据结构中的 content/totalElements\n// 如果接口不分页, 则传hasPagination=false, 此时数据取 payload, 当然也可以自定义, 设置dataPath即可\n\nconst defaultFirstPage = 1\n\nconst dataPath = \'payload.content\'\nconst totalPath = \'payload.totalElements\'\nconst noPaginationDataPath = \'payload\'\n\nconst treeChildKey = \'children\'\nconst treeParentKey = \'parentId\'\nconst treeParentValue = \'id\'\nconst defaultId = \'id\'\n\nconst dialogForm = \'dialogForm\'\n\nexport default {\n  name: \'ElDataTable\',\n  components: {\n    SelfLoadingButton,\n    TextButton\n  },\n  props: {\n    /**\n     * 请求url, 如果为空, 则不会发送请求; 改变url, 则table会重新发送请求\n     */\n    url: {\n      type: String,\n      default: \'\'\n    },\n    /**\n     * 主键，默认值 id，\n     * 修改/删除时会用到,请求会根据定义的属性值获取主键,即row[this.id]\n     */\n    id: {\n      type: String,\n      default: defaultId\n    },\n    /**\n     * 分页请求的第一页的值(有的接口0是第一页)\n     */\n    firstPage: {\n      type: Number,\n      default: defaultFirstPage\n    },\n    /**\n     * 渲染组件的分页数据在接口返回的数据中的路径, 嵌套对象使用.表示即可\n     */\n    dataPath: {\n      type: String,\n      default: dataPath\n    },\n    /**\n     * 分页数据的总数在接口返回的数据中的路径, 嵌套对象使用.表示即可\n     */\n    totalPath: {\n      type: String,\n      default: totalPath\n    },\n    /**\n     * 列属性设置, 详情见element-ui官网\n     * @link https://element.eleme.cn/2.4/#/zh-CN/component/table#table-column-attributes\n     */\n    columns: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    /**\n     * 查询字段渲染, 配置参考el-form-renderer\n     * @link https://femessage.github.io/el-form-renderer/\n     */\n    searchForm: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    /**\n     * 是否开启搜索栏折叠功能\n     */\n    canSearchCollapse: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 点击查询按钮, 查询前执行的函数, 需要返回Promise\n     */\n    beforeSearch: {\n      type: Function,\n      default() {\n        return Promise.resolve()\n      }\n    },\n    /**\n     * 单选, 适用场景: 不可以批量删除\n     */\n    single: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 切换页面时，已勾选项不会丢失\n     */\n    persistSelection: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 是否有操作列\n     */\n    hasOperation: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 操作列的自定义按钮, 渲染的是element-ui的button, 支持包括style在内的以下属性:\n     * {type: \'\', text: \'\', atClick: row => Promise.resolve(), show: row => return true时显示 }\n     * 点击事件 row参数 表示当前行数据, 需要返回Promise, 默认点击后会刷新table, resolve(false) 则不刷新\n     */\n    extraButtons: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    /**\n     * 头部的自定义按钮, 渲染的是element-ui的button, 支持包括style在内的以下属性:\n     * {type: \'\', text: \'\', atClick: selected => Promise.resolve(), show: selected => return true时显示, disabled: selected => return true时禁用}\n     * 点击事件 selected参数 表示选中行所组成的数组, 函数需要返回Promise, 默认点击后会刷新table, resolve(false) 则不刷新\n     */\n    headerButtons: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    /**\n     * 是否有新增按钮\n     */\n    hasNew: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否有编辑按钮\n     */\n    hasEdit: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否有查看按钮\n     */\n    hasView: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * table头部是否有删除按钮(该按钮要多选时才会出现)\n     */\n    hasDelete: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 新增按钮文案\n     */\n    newText: {\n      type: String,\n      default: \'新增\'\n    },\n    /**\n     * 修改按钮文案\n     */\n    editText: {\n      type: String,\n      default: \'修改\'\n    },\n    /**\n     * 查看按钮文案\n     */\n    viewText: {\n      type: String,\n      default: \'查看\'\n    },\n    /**\n     * 某行数据是否可以删除, 返回true表示可以, 控制的是单选时单行的删除按钮\n     */\n    canDelete: {\n      type: Function,\n      default() {\n        return true\n      }\n    },\n    /**\n     * 点击新增按钮时的方法, 当默认新增方法不满足需求时使用, 需要返回promise\n     * 参数(data, row) data 是form表单的数据, row 是当前行的数据, 只有isTree为true时, 点击操作列的新增按钮才会有值\n     */\n    onNew: {\n      type: Function\n    },\n    /**\n     * 点击修改按钮时的方法, 当默认修改方法不满足需求时使用, 需要返回promise\n     * 参数(data, row) data 是form表单的数据, row 是当前行的数据\n     */\n    onEdit: {\n      type: Function\n    },\n    /**\n     * 点击删除按钮时的方法, 当默认删除方法不满足需求时使用, 需要返回promise\n     * 多选时, 参数为selected, 代表选中的行组成的数组; 非多选时参数为row, 代表单行的数据\n     */\n    onDelete: {\n      type: Function\n    },\n    /**\n     * 是否分页。如果不分页，则请求传参page=-1\n     */\n    hasPagination: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 分页组件的子组件布局，子组件名用逗号分隔，对应element-ui pagination的layout属性\n     * @link https://element.eleme.cn/2.4/#/zh-CN/component/pagination\n     */\n    paginationLayout: {\n      type: String,\n      default: \'total, sizes, prev, pager, next, jumper\'\n    },\n    /**\n     * 分页组件的每页显示个数选择器的选项设置，对应element-ui pagination的page-sizes属性\n     * @link https://element.eleme.cn/2.4/#/zh-CN/component/pagination\n     */\n    paginationSizes: {\n      type: Array,\n      default: () => [10, 20, 30, 40, 50]\n    },\n    /**\n     * 分页组件的每页显示个数选择器默认选项，对应element-ui pagination的page-size属性\n     * @link https://element.eleme.cn/2.4/#/zh-CN/component/pagination\n     */\n    paginationSize: {\n      type: Number,\n      default: 10\n    },\n    /**\n     * @deprecated\n     * 不分页时的size的大小(建议接口约定，不分页时传参page=-1，故一般不会用到此属性)\n     */\n    noPaginationSize: {\n      type: Number,\n      default: 999\n    },\n    /**\n     * 要渲染的数据是否是树形结构\n     */\n    isTree: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 树形结构相关: 子节点的字段名\n     */\n    treeChildKey: {\n      type: String,\n      default: treeChildKey\n    },\n    /**\n     * 树形结构相关: 父节点的字段名\n     */\n    treeParentKey: {\n      type: String,\n      default: treeParentKey\n    },\n    /**\n     * 树形结构相关: 父节点字段值的来源字段。\n     * 新增/修改时会用到, 例如, 在id为2的节点新增子节点, 则子节点的parentId为2, 也即parentId的值来源于字段id, 故treeParentValue为id\n     */\n    treeParentValue: {\n      type: String,\n      default: treeParentValue\n    },\n    /**\n     * 树形结构相关: 是否展开所有节点\n     */\n    expandAll: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * element table 属性设置, 详情配置参考element-ui官网\n     * @link https://element.eleme.cn/2.4/#/zh-CN/component/table#table-attributes\n     */\n    tableAttrs: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    /**\n     * 操作列属性\n     * @link https://element.eleme.cn/2.4/#/zh-CN/component/table#table-column-attributes\n     */\n    operationAttrs: {\n      type: Object,\n      default() {\n        return {width: \'\', fixed: \'right\'}\n      }\n    },\n    /**\n     * 是否有弹窗, 用于不需要弹窗时想减少DOM渲染的场景\n     */\n    hasDialog: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 新增弹窗的标题，默认为newText的值\n     */\n    dialogNewTitle: {\n      type: String,\n      default() {\n        return this.newText\n      }\n    },\n    /**\n     * 修改弹窗的标题，默认为editText的值\n     */\n    dialogEditTitle: {\n      type: String,\n      default() {\n        return this.editText\n      }\n    },\n    /**\n     * 查看弹窗的标题，默认为viewText的值\n     */\n    dialogViewTitle: {\n      type: String,\n      default() {\n        return this.viewText\n      }\n    },\n    /**\n     * 弹窗表单, 用于新增与修改, 详情配置参考el-form-renderer\n     * @link https://femessage.github.io/el-form-renderer/\n     */\n    form: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    /**\n     * 弹窗表单属性设置, 详情配置参考element-ui官网\n     * @link https://element.eleme.cn/2.4/#/zh-CN/component/form#form-attributes\n     */\n    formAttrs: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    /**\n     * 同extraBody\n     * @deprecated\n     */\n    extraParams: {\n      type: Object,\n      default() {\n        return undefined\n      }\n    },\n    /**\n     * 新增/修改提交时，请求体带上额外的参数。\n     */\n    extraBody: {\n      type: Object,\n      default() {\n        return undefined\n      }\n    },\n    /**\n     * 在新增/修改弹窗 点击确认时调用，返回Promise, 如果reject, 则不会发送新增/修改请求\n     * 参数: (data, isNew) data为表单数据, isNew true 表示是新增弹窗, false 为 编辑弹窗\n     */\n    beforeConfirm: {\n      type: Function,\n      default() {\n        return Promise.resolve()\n      }\n    },\n    /**\n     * 同extraQuery\n     * @deprecated\n     */\n    customQuery: {\n      type: Object,\n      default() {\n        return undefined\n      }\n    },\n    /**\n     * 向请求url添加的额外参数。\n     * 可用.sync修饰，此时点击重置按钮后该参数也会被重置\n     */\n    extraQuery: {\n      type: Object,\n      default() {\n        return undefined\n      }\n    },\n    /**\n     * 是否开启使用url保存query参数的功能\n     */\n    saveQuery: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      data: [],\n      hasSelect: this.columns.length && this.columns[0].type == \'selection\',\n      size: this.paginationSize || this.paginationSizes[0],\n      page: defaultFirstPage,\n      // https://github.com/ElemeFE/element/issues/1153\n      total: null,\n      loading: false,\n      // 多选项的数组\n      selected: [],\n\n      //弹窗\n      dialogTitle: this.dialogNewTitle,\n      dialogVisible: false,\n      isNew: true,\n      isEdit: false,\n      isView: false,\n      confirmLoading: false,\n      // 要修改的那一行\n      row: {},\n\n      // 初始的extraQuery值, 重置查询时, 会用到\n      // JSON.stringify是为了后面深拷贝作准备\n      initExtraQuery: JSON.stringify(this.extraQuery || this.customQuery || {}),\n      isSearchCollapse: false\n    }\n  },\n  computed: {\n    routerMode() {\n      return this.$router ? this.$router.mode : \'hash\'\n    },\n    hasSearchForm() {\n      return this.searchForm.length || this.$slots.search\n    },\n    _extraBody() {\n      return this.extraBody || this.extraParams || {}\n    },\n    _extraQuery() {\n      return this.extraQuery || this.customQuery || {}\n    },\n    selectStrategy() {\n      return getSelectStrategy(this)\n    }\n  },\n  watch: {\n    url: function(val, old) {\n      this.page = defaultFirstPage\n      this.getList()\n    },\n    dialogVisible: function(val, old) {\n      if (!val) {\n        this.isNew = false\n        this.isEdit = false\n        this.isView = false\n        this.confirmLoading = false\n\n        this.$refs[dialogForm].resetFields()\n      }\n    },\n    selected(val) {\n      /**\n       * 多选项发生变化\n       * @property {array} rows - 已选中的行数据的数组\n       */\n      this.$emit(\'selection-change\', val)\n    }\n  },\n  mounted() {\n    if (this.saveQuery) {\n      const query = queryUtil.get(location.href)\n      if (query) {\n        this.page = parseInt(query.page)\n        this.size = parseInt(query.size)\n        // 恢复查询条件，但对slot=search无效\n        if (this.$refs.searchForm) {\n          delete query.page\n          delete query.size\n          this.$refs.searchForm.updateForm(query)\n        }\n      }\n    }\n\n    this.$nextTick(() => {\n      this.getList()\n    })\n  },\n  methods: {\n    /**\n     * 手动刷新列表数据\n     * @public\n     * @param {boolean} saveQuery - 是否保存query到路由上\n     */\n    getList(saveQuery) {\n      const {url} = this\n\n      if (!url) {\n        console.warn(\'DataTable: url 为空, 不发送请求\')\n        return\n      }\n\n      // 构造query对象\n      let query = {}\n      if (this.$refs.searchForm) {\n        Object.assign(query, this.$refs.searchForm.getFormValue())\n      }\n      Object.assign(query, this._extraQuery)\n\n      query.size = this.hasPagination ? this.size : this.noPaginationSize\n\n      // 根据偏移值计算接口正确的页数\n      const pageOffset = this.firstPage - defaultFirstPage\n      query.page = this.hasPagination ? this.page + pageOffset : -1\n\n      // 无效值过滤，注意0是有效值\n      query = Object.keys(query)\n        .filter(k => [\'\', undefined, null].indexOf(query[k]) === -1)\n        .reduce((obj, k) => {\n          obj[k] = query[k].toString().trim()\n          return obj\n        }, {})\n\n      const queryStr =\n        (url.indexOf(\'?\') > -1 ? \'&\' : \'?\') +\n        queryUtil.stringify(query, \'=\', \'&\')\n\n      // 请求开始\n      this.loading = true\n\n      this.$axios\n        .get(url + queryStr)\n        .then(({data: resp}) => {\n          let data = []\n\n          // 不分页\n          if (!this.hasPagination) {\n            data =\n              _get(resp, this.dataPath) ||\n              _get(resp, noPaginationDataPath) ||\n              []\n          } else {\n            data = _get(resp, this.dataPath) || []\n            this.total = _get(resp, this.totalPath)\n          }\n\n          this.data = data\n\n          // 树形结构逻辑\n          if (this.isTree) {\n            this.data = this.tree2Array(data, this.expandAll)\n          }\n\n          this.loading = false\n          /**\n           * 请求返回, 数据更新后触发\n           * @property {object} data - table的数据\n           * @property {object} resp - 请求返回的完整response\n           */\n          this.$emit(\'update\', data, resp)\n\n          // 开启persistSelection时，需要同步selected状态到el-table中\n          this.$nextTick(() => {\n            this.selectStrategy.updateElTableSelection()\n          })\n        })\n        .catch(err => {\n          /**\n           * 请求数据失败，返回err对象\n           * @event error\n           */\n          this.$emit(\'error\', err)\n          this.loading = false\n        })\n\n      // 存储query记录, 便于后面恢复\n      if (saveQuery) {\n        // 存储的page是table的页码，无需偏移\n        query.page = this.page\n        const newUrl = queryUtil.set(location.href, query, this.routerMode)\n        history.pushState(history.state, \'el-data-table search\', newUrl)\n      }\n    },\n    search() {\n      this.$refs.searchForm.validate(valid => {\n        if (!valid) return\n\n        this.beforeSearch()\n          .then(() => {\n            this.page = defaultFirstPage\n            this.getList(this.saveQuery)\n          })\n          .catch(err => {\n            this.$emit(\'error\', err)\n          })\n      })\n    },\n    resetSearch() {\n      // reset后, form里的值会变成 undefined, 在下一次查询会赋值给query\n      this.$refs.searchForm.resetFields()\n      this.page = defaultFirstPage\n\n      // 重置\n      if (this.saveQuery) {\n        const newUrl = queryUtil.clear(location.href)\n        history.replaceState(history.state, \'\', newUrl)\n      }\n\n      this.$nextTick(() => {\n        this.getList()\n      })\n\n      /**\n       * 按下重置按钮后触发\n       */\n      this.$emit(\'reset\')\n\n      this.$emit(\'update:customQuery\', JSON.parse(this.initExtraQuery))\n      this.$emit(\'update:extraQuery\', JSON.parse(this.initExtraQuery))\n    },\n    handleSizeChange(val) {\n      if (this.size === val) return\n\n      this.page = defaultFirstPage\n      this.size = val\n      this.getList(this.saveQuery)\n    },\n    handleCurrentChange(val) {\n      if (this.page === val) return\n\n      this.page = val\n      this.getList(this.saveQuery)\n    },\n    /**\n     * 切换某一行的选中状态，如果使用了第二个参数，则是设置这一行选中与否\n     *\n     * @public\n     * @param {object} row - 要更新的数据行\n     * @param {boolean} isSelected - 是否被勾选\n     */\n    toggleRowSelection(row, isSelected) {\n      return this.selectStrategy.toggleRowSelection(row, isSelected)\n    },\n    /**\n     * 清空多选项\n     *\n     * @public\n     */\n    clearSelection() {\n      return this.selectStrategy.clearSelection()\n    },\n    // 弹窗相关\n    // 除非树形结构在操作列点击新增, 否则 row 都是 undefined\n    onDefaultNew(row = {}) {\n      this.row = row\n      this.isNew = true\n      this.isEdit = false\n      this.isView = false\n      this.dialogTitle = this.dialogNewTitle\n      this.dialogVisible = true\n    },\n    onDefaultView(row) {\n      this.row = row\n      this.isView = true\n      this.isNew = false\n      this.isEdit = false\n      this.dialogTitle = this.dialogViewTitle\n      this.dialogVisible = true\n\n      // 给表单填充值\n      this.$nextTick(() => {\n        this.$refs[dialogForm].updateForm(row)\n      })\n    },\n    onDefaultEdit(row) {\n      this.row = row\n      this.isEdit = true\n      this.isNew = false\n      this.isView = false\n      this.dialogTitle = this.dialogEditTitle\n      this.dialogVisible = true\n\n      // 给表单填充值\n      this.$nextTick(() => {\n        this.$refs[dialogForm].updateForm(row)\n      })\n    },\n    cancel() {\n      this.dialogVisible = false\n    },\n    confirm() {\n      if (this.isView) {\n        this.cancel()\n        return\n      }\n\n      this.$refs[dialogForm].validate(valid => {\n        if (!valid) return false\n\n        let data = Object.assign(\n          {},\n          this.$refs[dialogForm].getFormValue(),\n          this._extraBody\n        )\n\n        if (this.isTree) {\n          if (this.isNew)\n            data[this.treeParentKey] = this.row[this.treeParentValue]\n          else data[this.treeParentKey] = this.row[this.treeParentKey]\n        }\n\n        this.beforeConfirm(data, this.isNew)\n          .then(resp => {\n            let condiction = \'isNew\'\n            let customMethod = \'onNew\'\n\n            if (this.isEdit) {\n              condiction = \'isEdit\'\n              customMethod = \'onEdit\'\n            }\n\n            if (this[condiction] && this[customMethod]) {\n              this[customMethod](data, this.row)\n                .then(resp => {\n                  this.getList()\n                  this.showMessage(true)\n                  this.cancel()\n                })\n                .catch(e => {})\n              return\n            }\n\n            // 默认新增/修改逻辑\n            let method = \'post\'\n            let url = this.url + \'\'\n\n            if (this.isEdit) {\n              method = \'put\'\n              url += `/${this.row[this.id]}`\n            }\n\n            this.confirmLoading = true\n\n            this.$axios[method](url, data)\n              .then(resp => {\n                this.getList()\n                this.showMessage(true)\n                this.cancel()\n              })\n              .catch(err => {\n                this.confirmLoading = false\n              })\n          })\n          .catch(e => {})\n      })\n    },\n    onDefaultDelete(row) {\n      this.$confirm(\'确认删除吗\', \'提示\', {\n        type: \'warning\',\n        confirmButtonClass: \'el-button--danger\',\n        beforeClose: (action, instance, done) => {\n          if (action == \'confirm\') {\n            instance.confirmButtonLoading = true\n\n            if (this.onDelete) {\n              this.onDelete(\n                this.hasSelect\n                  ? !this.single\n                    ? this.selected\n                    : this.selected[0]\n                  : row\n              )\n                .then(resp => {\n                  this.showMessage(true)\n                  done()\n                  this.clearSelection()\n                  this.getList()\n                })\n                .catch(e => {})\n                .finally(e => {\n                  instance.confirmButtonLoading = false\n                })\n              return\n            }\n\n            // 默认删除逻辑\n            // 单个删除\n            if (!this.hasSelect) {\n              this.$axios\n                .delete(this.url + \'/\' + row[this.id])\n                .then(resp => {\n                  instance.confirmButtonLoading = false\n                  done()\n                  this.showMessage(true)\n                  this.getList()\n                })\n                .catch(er => {\n                  instance.confirmButtonLoading = false\n                })\n            } else {\n              // 多选模式\n              this.$axios\n                .delete(\n                  this.url + \'/\' + this.selected.map(v => v[this.id]).toString()\n                )\n                .then(resp => {\n                  instance.confirmButtonLoading = false\n                  done()\n                  this.showMessage(true)\n                  this.clearSelection()\n                  this.getList()\n                })\n                .catch(er => {\n                  instance.confirmButtonLoading = false\n                })\n            }\n          } else done()\n        }\n      }).catch(er => {\n        /*取消*/\n      })\n    },\n    // 树形table相关\n    // https://github.com/PanJiaChen/vue-element-admin/tree/master/src/components/TreeTable\n    tree2Array(data, expandAll, parent = null, level = null) {\n      let tmp = []\n      data.forEach(record => {\n        if (record._expanded === undefined) {\n          this.$set(record, \'_expanded\', expandAll)\n        }\n        let _level = 0\n        if (level !== undefined && level !== null) {\n          _level = level + 1\n        }\n        this.$set(record, \'_level\', _level)\n        // 如果有父元素\n        if (parent) {\n          this.$set(record, \'parent\', parent)\n        }\n        tmp.push(record)\n\n        if (record[this.treeChildKey] && record[this.treeChildKey].length > 0) {\n          const children = this.tree2Array(\n            record[this.treeChildKey],\n            expandAll,\n            record,\n            _level\n          )\n          tmp = tmp.concat(children)\n        }\n      })\n      return tmp\n    },\n    showRow(row) {\n      const show = row.row.parent\n        ? row.row.parent._expanded && row.row.parent._show\n        : true\n      row.row._show = show\n      return show\n        ? \'animation:treeTableShow 1s-webkit-animation:treeTableShow 1s\'\n        : \'display:none\'\n    },\n    // 切换下级是否展开\n    toggleExpanded(trIndex) {\n      const record = this.data[trIndex]\n      record._expanded = !record._expanded\n    },\n    // 图标显示\n    iconShow(index, record) {\n      //      return index ===0 && record.children && record.children.length > 0;\n      return record[this.treeChildKey] && record[this.treeChildKey].length > 0\n    },\n    showMessage(isSuccess = true) {\n      if (isSuccess) {\n        this.$message({\n          type: \'success\',\n          message: \'操作成功\'\n        })\n      } else {\n        this.$message({\n          type: \'error\',\n          message: \'操作失败\'\n        })\n      }\n    }\n  }\n}\n<\/script>\n<style lang="stylus">\n.el-data-table {\n  color-blue = #2196F3;\n  space-width = 18px;\n\n  .ms-tree-space {\n    position: relative;\n    top: 1px;\n    display: inline-block;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 1;\n    width: space-width;\n    height: 14px;\n\n    &::before {\n      content: \'\';\n    }\n  }\n\n  .tree-ctrl {\n    position: relative;\n    cursor: pointer;\n    color: color-blue;\n  }\n\n  @keyframes treeTableShow {\n    from {\n      opacity: 0;\n    }\n\n    to {\n      opacity: 1;\n    }\n  }\n}\n</style>\n',".el-data-table .ms-tree-space {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  width: 18px;\n  height: 14px;\n}\n.el-data-table .ms-tree-space::before {\n  content: '';\n}\n.el-data-table .tree-ctrl {\n  position: relative;\n  cursor: pointer;\n  color: #2196f3;\n}\n@-moz-keyframes treeTableShow {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@-webkit-keyframes treeTableShow {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@-o-keyframes treeTableShow {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes treeTableShow {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n"]},media:void 0})},L,void 0,!1,void 0,O,void 0);function Q(e){Q.installed||(Q.installed=!0,e.component("ElDataTable",j))}var q={install:Q},R=null;return"undefined"!=typeof window?R=window.Vue:"undefined"!=typeof global&&(R=global.Vue),R&&R.use(q),e.default=j,e.install=Q,e}({},_get);
